var wd = require('wd');
require('colors');
var _ = require("lodash");
var chai = require("chai");
var chaiAsPromised = require("chai-as-promised");

chai.use(chaiAsPromised);
chai.should();
chaiAsPromised.transferPromiseness = wd.transferPromiseness;

// adding custom promise chain method
wd.addPromiseChainMethod(
    'elementByCssSelectorWhenReady',
    function(selector, timeout) {
        return this
            .waitForElementByCssSelector(selector, timeout)
            .elementByCssSelector(selector);
    }
);

// checking sauce credential
if(!process.env.SAUCE_USERNAME || !process.env.SAUCE_ACCESS_KEY){
    console.warn(
            '\nPlease configure your sauce credential:\n\n' +
            'export SAUCE_USERNAME=<SAUCE_USERNAME>\n' +
            'export SAUCE_ACCESS_KEY=<SAUCE_ACCESS_KEY>\n\n'
    );
    throw new Error("Missing sauce credentials");
}

// http configuration, not needed for simple runs
wd.configureHttp( {
    timeout: 120000,
    retryDelay: 15000,
    retries: 5
});


var desired = JSON.parse(process.env.DESIRED || '{browserName: "firefox"}');
desired.name = '4LTR Automation QAIT ';
desired.tags = ['4LTR'];
desired.browserName ='chrome';

describe('4LTR (' +'Automation'+') :: StudyBoard :: Filter', function() {
    var browser;
    var allPassed = true;

    before(function(done) {
        var username = process.env.SAUCE_USERNAME;
        var accessKey = process.env.SAUCE_ACCESS_KEY;

        browser = wd.promiseChainRemote("ondemand.saucelabs.com", 80, username, accessKey);

        if(process.env.VERBOSE){
            // optional logging
            browser.on('status', function(info) {
                console.log(info.cyan);
            });
            browser.on('command', function(meth, path, data) {
                console.log(' > ' + meth.yellow, path.grey, data || '');
            });
        }
        browser
            .init(desired)
            .nodeify(done);


    });

    afterEach(function(done) {
        allPassed = allPassed && (this.currentTest.state === 'passed');
        done();
    });

    after(function(done) {
        browser
            .quit()
            .sauceJobStatus(allPassed)
            .nodeify(done);
    });

    it("1. Navigate to home page", function(done) {

        browser
            .get("http://mtcinx-devapp01.mt.corp.web:3040/courses/mktg8/book")
            .title()
            .should.become("MKTG8")
            .elementByCss("h1.book-title.ng-binding")
            .text()
            .should.eventually.include('MKTG8')
            .nodeify(done);
        browser.setWindowSize(1090,768);
    });

    it("2. Click on the Assignment tab ", function(done) {

        browser
            .elementByCssSelectorWhenReady("#navigation-menu li:nth-child(2) a",2000)
            .click()
            .nodeify(done);
    });

    it("3. Verify the default state of Calendar Icon", function(done) {

        browser
            .elementByCssSelectorWhenReady(".calendar",2000)
            .isSelected()
            .should
            .become(false)
            .nodeify(done);
    });

    it("4. Click on Calendar Icon", function(done) {

        browser
            .elementByCssSelectorWhenReady(".calendar",2000)
            .click()
            .nodeify(done);
    });

    it("5. Verify the display of Calendar", function(done) {

        browser
            .elementByCssSelectorWhenReady(".calendar",2000)
            .isDisplayed()
            .should
            .become(true)
            .nodeify(done);
    });

 });
